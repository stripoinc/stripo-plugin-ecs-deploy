---
- name: Add PostgreSQL repository key
  become: true
  apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    state: present

- name: Add PostgreSQL repository
  become: true
  apt_repository:
    repo: "deb http://apt.postgresql.org/pub/repos/apt/ jammy-pgdg main"
    state: present
    filename: 'pgdg.list'
    update_cache: yes

- name: Install all necessary packages for PostgreSQL
  become: true
  apt:
    name:
      # Python dependencies for Ansible PostgreSQL modules
      - python3-pip
      - python3-psycopg2
      # System dependencies
      - wget
      - ca-certificates
      - gnupg
      # PostgreSQL server
      - "postgresql-{{ postgresql_version | default('15') }}"
    state: present
    update_cache: yes

- name: Install psycopg2 via pip3 (additional installation)
  become: true
  pip:
    name: psycopg2-binary
    executable: pip3

# - name: Set password for postgres user via shell
#   become: true
#   shell: |
#     sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'SuperSecretPostgresPassword';"

- name: Configure PostgreSQL for remote connections
  become: true
  replace:
    path: "/etc/postgresql/{{ postgresql_version | default('15') }}/main/postgresql.conf"
    regexp: '^#?listen_addresses\s*=.*'
    replace: "listen_addresses = '*'"

- name: Change peer authentication to md5 for postgres user
  become: true
  replace:
    path: "/etc/postgresql/{{ postgresql_version | default('15') }}/main/pg_hba.conf"
    regexp: '^local\s+all\s+postgres\s+peer'
    replace: 'local   all             postgres                                md5'

- name: Add rule for remote connections
  become: true
  lineinfile:
    path: "/etc/postgresql/{{ postgresql_version | default('15') }}/main/pg_hba.conf"
    line: "host    all             all             0.0.0.0/0               md5"
    insertafter: "^# IPv4 local connections:"

- name: Restart PostgreSQL service after changing pg_hba.conf
  become: true
  service:
    name: postgresql
    state: restarted

- name: Temporarily enable peer authentication for postgres
  become: true
  replace:
    path: "/etc/postgresql/{{ postgresql_version | default('15') }}/main/pg_hba.conf"
    regexp: '^local\s+all\s+postgres\s+md5'
    replace: 'local   all             postgres                                peer'
  register: peer_auth_changed

- name: Restart PostgreSQL after enabling peer (if was md5)
  become: true
  service:
    name: postgresql
    state: restarted
  when: peer_auth_changed.changed

- name: Set password for postgres user via shell (peer)
  become: true
  shell: |
    sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD '{{ postgresql_root_password }}';"
  when: peer_auth_changed.changed

- name: Restore md5 authentication for postgres
  become: true
  replace:
    path: "/etc/postgresql/{{ postgresql_version | default('15') }}/main/pg_hba.conf"
    regexp: '^local\s+all\s+postgres\s+peer'
    replace: 'local   all             postgres                                md5'
  when: peer_auth_changed.changed

- name: Restart PostgreSQL after restoring md5 (if was md5)
  become: true
  service:
    name: postgresql
    state: restarted
  when: peer_auth_changed.changed

# All tasks related to creating databases, users and granting permissions are executed through become_user: postgres
- name: Create databases
  become: true
  community.postgresql.postgresql_db:
    name: "{{ item.db }}"
    encoding: 'UTF-8'
    lc_collate: 'en_US.UTF-8'
    lc_ctype: 'en_US.UTF-8'
    template: template0
    state: present
    login_user: postgres
    login_password: "{{ postgresql_root_password }}"
  loop: "{{ databases_users }}"

- name: Create users
  become: true
  community.postgresql.postgresql_user:
    name: "{{ item.user }}"
    password: "{{ item.password }}"
    state: present
    login_user: postgres
    login_password: "{{ postgresql_root_password }}"
  loop: "{{ databases_users }}"

- name: Grant ALL PRIVILEGES on database to user
  become: true
  community.postgresql.postgresql_privs:
    database: "{{ item.db }}"
    roles: "{{ item.user }}"
    privs: "ALL"
    type: "database"
    state: present
    login_user: postgres
    login_password: "{{ postgresql_root_password }}"
  loop: "{{ databases_users }}"

- name: Grant CREATE on public schema to user in their database
  become: true
  community.postgresql.postgresql_query:
    db: "{{ item.db }}"
    query: "GRANT CREATE ON SCHEMA public TO {{ item.user }};"
    login_user: postgres
    login_password: "{{ postgresql_root_password }}"
  loop: "{{ databases_users }}"

- name: ALTER DEFAULT PRIVILEGES for future tables (ALL PRIVILEGES) for user in their database
  become: true
  community.postgresql.postgresql_query:
    db: "{{ item.db }}"
    query: "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON TABLES TO {{ item.user }};"
    login_user: postgres
    login_password: "{{ postgresql_root_password }}"
  loop: "{{ databases_users }}" 

